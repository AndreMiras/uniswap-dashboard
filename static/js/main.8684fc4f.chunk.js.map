{"version":3,"sources":["utils/resource.ts","providers/Web3/index.tsx","themes/dark.ts","themes/light.ts","themes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["resource","fetchResource","errors","results","promises","args","a","argStr","JSON","stringify","then","v","catch","e","reset","load","web3","enableEthereum","window","ethereum","Web3","enable","currentProvider","Error","networkVersion","selectedAddress","stored","localStorage","getItem","console","log","getSelectedAddress","chainHawk","hawk","default","key","addressesHawk","networkHawk","hawkeye","get","addressInfoHawk","getNetworkColor","loading","error","data","addressTransactionsHawk","useWeb3Chain","useHawkState","useWeb3Network","useWeb3Addresses","useWeb3ResetStoredAddress","setState","useHawkSetState","useCallback","address","setItem","useWeb3SetStoredAddress","useWeb3AddressInfo","addressInfo","useEffect","dispatch","fetchAddressInfoResource","err","message","useWeb3AddressTransactions","addressTransactions","fetchAddressTransactionsResource","on","connectInfo","addresses","accounts","chainId","alert","chain","fetch","res","json","weiBalance","token","balance","Number","tokenInfo","decimals","usdBalance","price","rate","toFixed","currency","dark","createMuiTheme","palette","type","background","paper","primary","main","secondary","zIndex","appBar","drawer","light","themeType","ThemeProvider","children","theme","Home","lazy","About","Uniswap","App","fallback","LinearProgress","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","utils","MomentUtils","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8684fc4f.chunk.js","sourcesContent":["export function resource<A, V>(fetchResource: (args: A) => Promise<V>) {\n  let errors: { [argStr: string]: Error } = {}\n  let results: { [argStr: string]: V|null } = {}\n  let promises: { [argStr: string]: Promise<V> } = {}\n  function reset () {\n    errors = {}\n    results = {}\n    promises = {}\n  }\n  async function load (args: A) {\n    const argStr = JSON.stringify(args)\n    if (errors[argStr]) throw errors[argStr]\n    if (results[argStr]) return results[argStr]\n    if (promises[argStr]) return promises[argStr]\n    promises[argStr] = fetchResource(args)\n    .then(v => {\n      results[argStr] = v\n      return v\n    })\n    .catch(e => {\n      errors[argStr] = e\n      throw e\n    })\n    return promises[argStr]\n  }\n  return {\n    reset,\n    load\n  }\n}","import Web3 from \"web3\";\nimport { hawk, hawkeye, useHawkState, dispatch, useHawkSetState } from \"react-hawk\";\nimport { resource } from \"../../utils/resource\"\nimport { useEffect, useCallback } from \"react\";\n\nexport let web3: Web3;\n\nconst NON_ETH_BROWSER =\n  \"Non-Ethereum browser detected. You should consider trying MetaMask!\";\n\nexport const enableEthereum = async () => {\n  if ((window as any).ethereum) {\n    web3 = new Web3((window as any).ethereum);\n    return (window as any).ethereum.enable();\n  }\n  if ((window as any).web3) {\n    web3 = new Web3((window as any).web3.currentProvider);\n    return web3;\n  }\n  throw new Error(NON_ETH_BROWSER);\n};\n\nconst STORED_ADDRESS = 'STORED_ADDRESS'\nexport const networkVersion = (window as any).ethereum?.networkVersion ?? \"\";\nexport const selectedAddress = getSelectedAddress()\n\nfunction getSelectedAddress () {\n  try {\n    const stored = localStorage.getItem(STORED_ADDRESS)\n    if (stored) return stored\n    return (window as any).ethereum?.selectedAddress ?? \"\";\n  } catch (e) {\n    console.log('getSelectedAddress Error', e)\n    return (window as any).ethereum?.selectedAddress ?? \"\";\n  }\n}\n\nconst chainHawk = hawk({\n  default: networkVersion,\n  key: \"chain\",\n});\n\nconst addressesHawk = hawk({\n  default: selectedAddress ? [selectedAddress] : ([] as string[]),\n  key: \"addresses\",\n});\n\nconst networkHawk = hawkeye({\n  key: \"network\",\n  get: ({ get }) => {\n    const chain = get(chainHawk);\n    switch (chain) {\n      case \"1\":\n      case \"0x1\":\n        return \"Main\";\n      case \"3\":\n      case \"0x3\":\n        return \"Ropsten\";\n      case \"4\":\n      case \"0x4\":\n        return \"Rinkeby\";\n      case \"5\":\n      case \"0x5\":\n        return \"Goerli\";\n      case \"42\":\n      case \"0x2a\":\n        return \"Kovan\";\n      default:\n        return \"\";\n    }\n  },\n});\n\nconst networkColorHawk = hawkeye({\n  key: \"network-color\",\n  get: ({ get }) => {\n    const chain = get(chainHawk);\n    return getNetworkColor(chain);\n  },\n});\n\nconst addressInfoHawk = hawk<IAsyncState<IAddressInfo>>({\n  key: \"address-info\",\n  default: {\n    loading: false,\n    error: \"\",\n    data: null,\n  },\n});\n\nconst addressTransactionsHawk = hawk<IAsyncState<ITransaction[]>>({\n  key: \"address-transactions\",\n  default: {\n    loading: false,\n    error: \"\",\n    data: null,\n  },\n});\n\nexport const useWeb3Chain = () => useHawkState(chainHawk);\nexport const useWeb3Network = () => useHawkState(networkHawk);\nexport const useWeb3NetworkColor = () => useHawkState(networkColorHawk);\nexport const useWeb3Addresses = () => useHawkState(addressesHawk);\nexport const useWeb3ResetStoredAddress = () => {\n  const setState = useHawkSetState(addressesHawk)\n  return useCallback((address) => {\n    localStorage.setItem(STORED_ADDRESS, '')\n    setState([address])\n  }, [setState])\n}\nexport const useWeb3SetStoredAddress = () => {\n  const setState = useHawkSetState(addressesHawk)\n  return useCallback((address) => {\n    localStorage.setItem(STORED_ADDRESS, address)\n    setState([address])\n  }, [setState])\n}\nexport const useWeb3AddressInfo = () => {\n  const [address] = useWeb3Addresses()\n  const addressInfo = useHawkState(addressInfoHawk)\n  useEffect(() => {\n    if (address) {\n      dispatch(addressInfoHawk, { loading: true, data: null, error: '' })\n      fetchAddressInfoResource.load(address)\n        .then((data) => dispatch(addressInfoHawk, { loading: false, data, error: '' }))\n        .catch((err) => dispatch(addressInfoHawk, { loading: false, data: null, error: err.message }))\n    }\n  }, [address])\n  return addressInfo\n}\nexport const useWeb3AddressTransactions = () => {\n  const [address] = useWeb3Addresses()\n  const addressTransactions = useHawkState(addressTransactionsHawk)\n  useEffect(() => {\n    if (address) {\n      dispatch(addressTransactionsHawk, { loading: true, data: null, error: '' })\n      fetchAddressTransactionsResource.load(address)\n        .then((data) => dispatch(addressTransactionsHawk, { loading: false, data, error: '' }))\n        .catch((err) => dispatch(addressTransactionsHawk, { loading: false, data: null, error: err.message }))\n    }\n  }, [address])\n  return addressTransactions\n}\n\ntry {\n  const ethereum = (window as any).ethereum;\n  if (ethereum) {\n    web3 = new Web3((window as any).ethereum);\n    if (ethereum.on) {\n      ethereum.on(\"connect\", (connectInfo: any) =>\n        console.log(\"Eth connection\", connectInfo)\n      );\n      ethereum.on(\"disconnect\", (error: any) =>\n        console.log(\"Eth disconnect\", error)\n      );\n      ethereum.on(\"accountsChanged\", (addresses: any) =>\n        console.log(\"Eth accountsChanged\", addresses)\n      );\n      ethereum.on(\"chainChanged\", (accounts: any) =>\n        console.log(\"Eth chainChanged\", accounts)\n      );\n      ethereum.on(\"accountsChanged\", (addresses: any) => {\n        dispatch(addressesHawk, addresses)\n      });\n      ethereum.on(\"chainChanged\", (chainId: any) => dispatch(chainHawk, chainId));\n    }\n  } else if ((window as any).web3) {\n    web3 = new Web3((window as any).web3.currentProvider);\n  }\n} catch (err) {\n  alert(err.message)\n}\n\nexport function getNetworkColor(chain: string) {\n  switch (chain) {\n    case \"1\":\n    case \"0x1\":\n      return \"rgba(3, 135, 137)\";\n    case \"3\":\n    case \"0x3\":\n      return \"rgb(255, 74, 141)\";\n    case \"4\":\n    case \"0x4\":\n      return \"rgb(246, 195, 67)\";\n    case \"5\":\n    case \"0x5\":\n      return \"rgb(48, 153, 242)\";\n    case \"42\":\n    case \"0x2a\":\n      return \"rgb(112, 87, 255)\";\n    default:\n      return \"\";\n  }\n}\n\nexport const fetchAddressInfoResource = resource(fetchAddressInfo)\nexport const fetchAddressTransactionsResource = resource(fetchAddressTransactions)\n\nexport async function fetchAddressInfo (address: string): Promise<IAddressInfo> {\n  return fetch(`https://api.ethplorer.io/getAddressInfo/${address}?apiKey=EK-96NbS-9bixWLY-9CJQ3`)\n  .then(res => res.json())\n}\n\nexport async function fetchAddressTransactions (address: string): Promise<ITransaction[]> {\n  return fetch(`https://api.ethplorer.io/getAddressTransactions/${address}?apiKey=EK-96NbS-9bixWLY-9CJQ3`)\n  .then(res => res.json())\n}\n\nexport function weiBalance (token: IToken) {\n  return token.balance / 10 ** Number(token.tokenInfo.decimals)\n}\n\nexport function usdBalance (token: IToken) {\n  if (!token.tokenInfo.price.rate) return null\n  return `${(weiBalance(token) * token.tokenInfo.price.rate).toFixed(2)} ${token.tokenInfo.price.currency}`\n}\n\ntype IAsyncState<V> = {\n  loading: boolean;\n  error: \"\";\n  data: V | null;\n};\n\nexport type IAddressInfo = {\n  address: string;\n  ETH: {\n    balance: number;\n    price: {\n      rate: number;\n      diff: number;\n      diff7d: number;\n      ts: number;\n      marketCapUsd: number;\n      availableSupply: number;\n      volume24h: number;\n      diff30d: number;\n    };\n  };\n  countTxs: number;\n  tokens: IToken[];\n};\n\n\nexport type IToken = {\n  tokenInfo: {\n    address: string;\n    name: string;\n    decimals: string;\n    symbol: string;\n    totalSupply: string;\n    owner: string;\n    lastUpdated: number;\n    issuancesCount: number;\n    holdersCount: number;\n    description: string;\n    website: string;\n    twitter: string;\n    links: string;\n    price: {\n      rate: number;\n      diff: number;\n      diff7d: number;\n      ts: number;\n      marketCapUsd: number;\n      availableSupply: number;\n      volume24h: number;\n      diff30d: number;\n      currency: string;\n    };\n  }\n  balance: number;\n  totalIn: number;\n  totalOut: number;\n}\n\nexport type ITransaction = {\n    timestamp: number\n    from: string\n    to: string\n    hash: string\n    value: string\n    input: string\n    success: string\n}","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const dark = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    background: {\n      // default: '#c5c3c6',\n      paper: '#46494c'\n    },\n    primary: {\n      main: '#1985a1'\n    },\n    secondary: {\n      main: '#4c5c68'\n    }\n  },\n  zIndex: {\n    appBar: 1200,\n    drawer: 1100\n  }\n});\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const light = createMuiTheme({\n  palette: {\n    type: \"light\",\n    background: {\n      // default: '#c5c3c6',\n      // paper: '#dcdcdd'\n    },\n    primary: {\n      main: '#1985a1'\n    },\n    secondary: {\n      main: '#4c5c68'\n    }\n  },\n  zIndex: {\n    appBar: 1200,\n    drawer: 1100\n  }\n});","import React, { useCallback, FC } from 'react'\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { hawk, useHawkState, useHawkSetState } from 'react-hawk'\nimport { dark } from './dark'\nimport { light } from './light'\n\nconst key = 'theme-type'\nconst themeType = hawk({\n  key,\n  default: localStorage.getItem(key) || 'dark',\n})\n\nexport const useThemeType = () => useHawkState(themeType)\nexport const useSetThemeType = () => {\n  const setTheme = useHawkSetState(themeType)\n  return useCallback((type: string) => {\n    setTheme(type)\n    localStorage.setItem(key, type)\n  }, [setTheme])\n}\nexport const ThemeProvider: FC = ({ children }) => {\n  const type = useThemeType()\n  return (\n    <MuiThemeProvider theme={type === 'dark' ? dark : light}>\n      {children}\n    </MuiThemeProvider>\n  )\n}","import React, { Suspense, lazy } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\nconst Uniswap = lazy(() => import('./routes/Uniswap'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<LinearProgress />}>\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/uniswap\" component={Uniswap}/>\n          <Route path=\"/about\" component={About}/>\n        </Switch>\n      </HashRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport MuiPickersUtilsProvider from \"@material-ui/pickers/MuiPickersUtilsProvider\";\nimport MomentUtils from \"@date-io/moment\";\nimport { ThemeProvider } from \"./themes\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport './providers/Web3'\nimport \"./index.css\";\nimport { estimateBlocksTilNextMasternodeRewards, getBalances, mapValues } from \"./providers/Energi/api\";\n\nconst address = \"0x6ca67362d28eeb8d1d845d26daad1db5a598d82a\";\n\n// estimateBlocksTilNextMasternodeRewards(address)\n// .then(values => mapValues(values, (estimate) => ({\n//   ...estimate,\n//   estimatedTime: estimate.estimatedTime.toLocaleString(),\n//   estimatedTimeUntil: estimate.estimatedTime.fromNow(),\n// })))\n// .then((estimates) => console.table(estimates))\n\n// getBalances(address).then(balances => console.table(balances))\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <CssBaseline />\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}